name: Snapshot

on:
    push:
        paths-ignore:
            - '**.pdf'
            - '**.mhtml'

env:
    NAME: Thibaut

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            
            - uses: pnpm/action-setup@v2.4.0
              name: Install pnpm
              with:
                version: 8
                run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - uses: actions/cache@v3
              name: Setup pnpm cache
              with:
                path: ${{ env.STORE_PATH }}
                key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                restore-keys: |
                    ${{ runner.os }}-pnpm-store-
            
            - name: Install dependencies
              run: pnpm install
            
            - name: Build
              run: pnpm run build

    snapshot:
        runs-on: ubuntu-latest

        needs: build
        steps:
            - name: Pull image in the background
              run: docker pull ghcr.io/puppeteer/puppeteer:latest &

            - name: Checkout
              uses: actions/checkout@v4
            
            - uses: pnpm/action-setup@v2.4.0
              name: Install pnpm
              with:
                version: 8
                run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - uses: actions/cache@v3
              name: Setup pnpm cache
              with:
                path: ${{ env.STORE_PATH }}
                key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                restore-keys: |
                    ${{ runner.os }}-pnpm-store-
            
            - name: Install dependencies
              run: pnpm install
            
            - name: Build
              run: pnpm run build

            - name: Run the server
              run: |
                pnpm run preview &
                sleep 5
                
            - name: Test with curl
              run: |
                curl -I http://localhost:4173
                
            - name: Take snapshot
              run: |
                mkdir -m 777 gen
                docker run -i --init --cap-add=SYS_ADMIN -v ./gen:/home/pptruser/gen --network host ghcr.io/puppeteer/puppeteer:latest node -e "$(cat snapshot.js)" http://localhost:4173 ./gen
                sed -i 's|http://localshot:4173|https://cv.bnei.dev|g' static/*
                mv ./gen/* ./static/

            - name: git config
              run: |
                git config user.name "${GITHUB_ACTOR}"
                git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

            - name: push to git
              run: |
                git add static
                git commit -m "Snapshot ${{ github.sha }}"
                git push
    
    deploy:
        runs-on: ubuntu-latest
        needs: 
          - build 
          - snapshot
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                ref: ${{ github.ref }}
            
            - uses: pnpm/action-setup@v2.4.0
              name: Install pnpm
              with:
                version: 8
                run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - uses: actions/cache@v3
              name: Setup pnpm cache
              with:
                path: ${{ env.STORE_PATH }}
                key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                restore-keys: |
                    ${{ runner.os }}-pnpm-store-
            
            - name: Install dependencies
              run: pnpm install

            - name: Install Vercel CLI
              run: npm install --global vercel@latest

            - name: Pull Vercel Environment Information
              run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

            - name: Build Project Artifacts
              run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

            - name: Deploy Project Artifacts to Vercel
              run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}